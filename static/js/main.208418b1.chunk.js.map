{"version":3,"sources":["TransitMap/index.js","App.js","serviceWorker.js","index.js"],"names":["offsetGroups","manualOffsets","x","y","unused","acTransitRoutes","feature","Winter19Routeshape","objects","overlapping","box1","box2","x2","x1","y1","y2","TransitMap","props","selected","visibleClassString","colorScale","orderScale","dashScale","useState","tooltipData","setTooltipData","useDimensions","ref","width","height","useMemo","geometry","projection","geoMercator","scale","rotate","translate","path","geoPath","bounds","dx","dy","getBounds","Math","max","scaleProjection","routes","forEach","g","index","initIndex","labelPositions","sortBy","features","map","f","scaleKey","changes","trim","color","order","dash","center","centroid","getCenter","route","i","offsets","filter","group","includes","offset","offsetType","name","direction","flatCoordinates","flatDeep","arr","d","reduce","acc","val","concat","Array","isArray","slice","coordinates","Infinity","start","position","usedPositon","find","lp","splice","pos","length","console","log","push","labelPos","hoverLine","e","pageX","pageY","target","touches","dataset","status","offsetx","offsety","undefined","useEffect","r","displayRoutes","key","id","transform","className","stroke","fill","strokeWidth","strokeOpacity","pointerEvents","data-route","data-status","data-color","data-path","data-order","data-offsetx","data-offsety","displayLabels","fontScale","scaleLinear","domain","range","clamp","font","floor","min","size","fillOpacity","cursor","fontSize","textAnchor","minScale","maxScale","showControls","controlsClass","btnClass","onClick","onMouseMove","onTouchStart","style","left","top","borderColor","properties","PUB_RTE","serviceChanges","line","warn","join","typesInOrder","scaleOrdinal","isNaN","parseInt","getSuggestionValue","suggestion","App","value","setValue","suggestions","setSuggestions","visibleGroups","setVisibleGroups","t","reverse","groups","nextGroups","opacity","background","alwaysRenderSuggestions","onSuggestionsFetchRequested","inputValue","toLowerCase","getSuggestions","onSuggestionsClearRequested","renderSuggestion","selection","inputProps","placeholder","onChange","newValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"o2r8BAgBMA,EAAe,GAwBfC,EAAgB,CACpB,EAAK,CAAEC,GAAI,IAAMC,GAAI,KACrB,IAAO,CAAED,GAAI,KAAOC,EAAG,MACvB,IAAO,CAAED,EAAG,GAAKC,EAAG,GACpB,GAAM,CAAED,GAAI,KAAOC,GAAI,MAGnBC,EAAS,GACTC,EAAkBC,YAAQC,EAAqBA,EAAmBC,QAAQD,oBA6ChF,SAASE,EAAYC,EAAMC,GACzB,OAAOD,EAAKE,IAAMD,EAAKE,IAAMH,EAAKG,IAAMF,EAAKC,IAAMF,EAAKI,IAAMH,EAAKI,IAAML,EAAKK,IAAMJ,EAAKG,GAG5E,SAASE,EAAWC,GAAQ,IACjCC,EAAoED,EAApEC,SAAUC,EAA0DF,EAA1DE,mBAAoBC,EAAsCH,EAAtCG,WAAYC,EAA0BJ,EAA1BI,WAAYC,EAAcL,EAAdK,UADtB,EAEFC,qBAFE,mBAEjCC,EAFiC,KAEpBC,EAFoB,OAGPC,cAHO,mBAGjCC,EAHiC,YAG1BC,EAH0B,EAG1BA,MAAOC,EAHmB,EAGnBA,OAHmB,EAKOC,mBAAQ,kBACrDF,EA3BJ,SAAyBG,EAAUH,EAAOC,GACxC,IAAMG,EAAaC,cAAcC,MAAM,KAAMC,OAAO,EAAE,GAAI,IAAIC,UAAU,CAACR,EAAQ,EAAGC,EAAS,IACvFQ,EAAOC,cAAUN,WAAWA,GAFc,EAVlD,SAAmBK,EAAMN,GACvB,IAAMQ,EAASF,EAAKE,OAAOR,GACzBS,EAAKD,EAAO,GAAG,GAAKA,EAAO,GAAG,GAC9BzB,EAAKyB,EAAO,GAAG,GAIjB,MAAO,CAAEC,KAAIC,GAHNF,EAAO,GAAG,GAAKzB,EAGLZ,GAFVqC,EAAO,GAAG,GAAKA,EAAO,GAAG,IAAM,EAElBpC,GADbW,EAAKyB,EAAO,GAAG,IAAM,GAQHG,CAAUL,EADpBN,GACPS,EAJwC,EAIxCA,GAAIC,EAJoC,EAIpCA,GAAIvC,EAJgC,EAIhCA,EAAGC,EAJ6B,EAI7BA,EACb+B,EAAQ,GAAMS,KAAKC,IAAIJ,EAAKZ,EAAOa,EAAKZ,IAAW,EAEzD,MAAO,CAAEG,aAAYK,OAAMH,QAAOE,UADpB,CAACR,EAAQ,EAAIM,EAAQhC,EAAG2B,EAAS,EAAIK,EAAQ/B,GACdD,IAAGC,IAAGqC,KAAIC,MAqBjDI,CAAgBxC,EAAiBuB,EAAOC,GACxC,CAAEO,UAAW,CAAC,EAAG,GAAIF,MAAO,KAC/B,CAACN,EAAOC,IAJHG,EALgC,EAKhCA,WAAYK,EALoB,EAKpBA,KAAMD,EALc,EAKdA,UAAWF,EALG,EAKHA,MAQ/BY,EAAShB,mBAAQ,WACrB9B,EAAa+C,SAAQ,SAAAC,GACnBA,EAAEC,MAAQD,EAAEE,aAEd,IAAMC,EAAiB,GACvB,OAAOvB,EACLwB,IACEA,IACE/C,EAAgBgD,SAASC,KAAI,SAAAC,GAO3B,OANAA,EAAEC,SAAWD,EAAEE,QAAUF,EAAEE,QAXlB,aAWsCC,OAAS,QACxDH,EAAEI,MAAQvC,EAAWmC,EAAEC,UACvBD,EAAEK,MAAQvC,EAAWkC,EAAEC,UACvBD,EAAEM,KAAOvC,EAAUiC,EAAEC,UACrBD,EAAElB,KAAOA,EAAKkB,GACdA,EAAEO,OA/Dd,SAAmBzB,EAAMN,GAAW,IAAD,EAClBM,EAAK0B,SAAShC,GADI,mBAEjC,MAAO,CAAE7B,EAFwB,KAErBC,EAFqB,MA+DZ6D,CAAU3B,EAAMkB,GACpBA,MAET,SAAAA,GAAC,OAAKA,EAAEU,UACV,SAAAV,GAAC,OAAIA,EAAEK,SACRN,KAAI,SAACC,EAAGW,GACP,IAAMC,EAAUnE,EAAaoE,QAAO,SAAAC,GAAK,OAAIA,EAAMvB,OAAOwB,SAASf,EAAEU,UACrE,GAAIE,EAAQ,GAAI,CACd,IAAMI,EAASJ,EAAQ,GACvBZ,EAAEiB,WAAaD,EAAOE,KACtBlB,EAAEgB,OAAS,CACTrE,EAAGqE,EAAOG,UAAU,GAAKH,EAAOtB,MAChC9C,EAAGoE,EAAOG,UAAU,GAAKH,EAAOtB,OAElCsB,EAAOtB,aAEPM,EAAEiB,WAAa,UACfjB,EAAEgB,OAAS,CACTrE,EAAG,EACHC,EAAG,GAIP,IACMwE,EA7Dd,SAASC,EAASC,GAAa,IAARC,EAAO,uDAAH,EACzB,OAAOA,EAAI,EACPD,EAAIE,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAIE,OAAOC,MAAMC,QAAQH,GAAOL,EAASK,EAAKH,EAAI,GAAKG,KAAM,IACtFJ,EAAIQ,QA0DsBT,CAASrB,EAAExB,SAASuD,YAAYD,QAASE,KACjEhC,EAAEiC,MAAQxD,EAAW2C,EAAgBU,MAAM,EAAG,IAE9C9B,EAAEiC,MAAM,IAAMjC,EAAEgB,OAAOrE,EAAIgC,EAC3BqB,EAAEiC,MAAM,IAAMjC,EAAEgB,OAAOpE,EAAI+B,EAC3B,IAAIuD,EAAWlC,EAAEiC,MACbE,EAAcvC,EAAewC,MAAK,SAAAC,GAAE,OAAInF,EAAYmF,EAAI,CAC1D/E,GAAI4E,EAAS,GARF,IASX3E,GAAI2E,EAAS,GACb7E,GAAI6E,EAAS,GAVF,IAWX1E,GAAI0E,EAAS,GAXF,SAcTxF,EAAcsD,EAAEU,SAClBwB,EAAS,IAAMxF,EAAcsD,EAAEU,OAAO/D,EACtCuF,EAAS,IAAMxF,EAAcsD,EAAEU,OAAO9D,GAIxC,IAtCa,iBAuCXwE,EAAgBkB,OAAO,EAAG,GAC1B,IAAIC,EAAMvC,EAAEiC,MACRb,EAAgBoB,QAAU,IAC5BD,EAAM9D,EAAW2C,EAAgBU,MAAM,EAAG,KACtC,IAAM9B,EAAEgB,OAAOrE,EAAIgC,EACvB4D,EAAI,IAAMvC,EAAEgB,OAAOpE,EAAI+B,EACvBwD,EAAcvC,EAAewC,MAAK,SAAAC,GAAE,OAAInF,EAAYmF,EAAI,CACtD/E,GAAIiF,EAAI,GA5BD,IA6BPhF,GAAIgF,EAAI,GACRlF,GAAIkF,EAAI,GA9BD,IA+BP/E,GAAI+E,EAAI,GA/BD,WAkCTE,QAAQC,IAAR,mBAAwB1C,EAAEU,QAC1ByB,GAAc,GAEhBD,EAAWK,EACT7F,EAAcsD,EAAEU,SAClBwB,EAAS,IAAMxF,EAAcsD,EAAEU,OAAO/D,EAAIgC,EAC1CuD,EAAS,IAAMxF,EAAcsD,EAAEU,OAAO9D,EAAI+B,IApBrCwD,GAAc,IAkCrB,OATAvC,EAAe+C,KAAK,CAClBrF,GAAI4E,EAAS,GA9CF,IA+CX3E,GAAI2E,EAAS,GACb7E,GAAI6E,EAAS,GAhDF,IAiDX1E,GAAI0E,EAAS,GAjDF,MAoDblC,EAAE4C,SAAW,CAAEjG,EAAGuF,EAAS,GAAItF,EAAGsF,EAAS,IAEpClC,KAEP,KACH,CAAC3B,EAAOS,EAAMjB,EAAYC,EAAYC,EAAWU,EAAYE,IAqBhE,SAASkE,EAAUC,GAAI,IACbC,EAAkCD,EAAlCC,MAAOC,EAA2BF,EAA3BE,MAAOC,EAAoBH,EAApBG,OAAQC,EAAYJ,EAAZI,QACtBC,EAAYF,EAAZE,QACAzC,EAAwDyC,EAAxDzC,MAAO0C,EAAiDD,EAAjDC,OAAQhD,EAAyC+C,EAAzC/C,MAAOtB,EAAkCqE,EAAlCrE,KAAMuB,EAA4B8C,EAA5B9C,MAAOgD,EAAqBF,EAArBE,QAASC,EAAYH,EAAZG,QACpD,GAAI5C,GACF,IAAKzC,GAAeA,EAAYyC,QAAUA,EAAO,CAC/C,IAAM/D,OAAc4G,IAAVR,EACNA,EACAG,EACEA,EAAQ,GAAGH,MACX,EACAnG,OAAc2G,IAAVP,EACNA,EACAE,EACEA,EAAQ,GAAGF,MACX,EACN9E,EAAe,CACbvB,IACAC,IACA8D,QACAN,QACAtB,OACAuB,QACAgD,UACAC,UACAF,OAAmB,KAAXA,EAAgB,YAAcA,UAItCnF,GACFC,EAAe,MAjDrBsF,qBAAU,WACR,IAAML,EAAU5D,EAAO6C,MAAK,SAAAqB,GAAC,OAAIA,EAAE/C,QAAU/C,KAC7C,GAAIwF,EAAS,CAAC,IACJzC,EAAwCyC,EAAxCzC,MAAOT,EAAiCkD,EAAjClD,SAAUG,EAAuB+C,EAAvB/C,MAAOtB,EAAgBqE,EAAhBrE,KAAMuB,EAAU8C,EAAV9C,MACtCnC,EAAe,CACbwC,QAAON,QAAOtB,OAAMuB,QACpB+C,OAAqB,KAAbnD,EAAkB,YAAcA,EAGxCtD,GAAI,IACJC,GAAI,IACJyG,QAAS,EACTC,QAAS,SAGXpF,EAAe,QAEhB,CAACP,EAAU4B,IAqCd,IAAMmE,EAAgBnF,mBAAQ,kBAC5BgB,EAAOQ,KAAI,SAAC0D,EAAG9C,GAAJ,OACT,uBACEgD,IAAKF,EAAE/C,MACPkD,GAAIH,EAAE/C,MACNmD,UAAS,oBAAeJ,EAAEzC,OAAOrE,EAAIgC,EAA5B,aAAsC8E,EAAEzC,OAAOpE,EAAI+B,EAAnD,KACTmF,UAAS,gBAA0B,KAAfL,EAAExD,SAAkB,WAAawD,EAAExD,WAEvD,0BACE6D,UAAU,UACVvC,EAAGkC,EAAE3E,KACLiF,OAAQN,EAAErD,MACV4D,KAAK,OACLC,YAAa,IAAMtF,EACnBuF,cAAe,GACfC,cAAc,SAEhB,0BACEL,UAAU,YACVvC,EAAGkC,EAAE3E,KACLiF,OAAQN,EAAErD,MACV4D,KAAK,OACLC,YAAa,EAAItF,EACjBuF,cAAc,IACdE,aAAYX,EAAE/C,MACd2D,cAAaZ,EAAExD,SACfqE,aAAYb,EAAErD,MACdmE,YAAWd,EAAE3E,KACb0F,aAAY7D,EACZ8D,eAAchB,EAAEzC,OAAOrE,EACvB+H,eAAcjB,EAAEzC,OAAOpE,UAI5B,CAAC2C,EAAQZ,IAENgG,EAAgBpG,mBAAQ,WAC5B,IAAMqG,EAAYC,cACjBC,OAAO,CAAC,IAAK,OAIbC,MAAM,CAAC,EAAG,KACVC,OAAM,GACDC,EAAO7F,KAAK8F,MAAMN,EAAUxF,KAAK+F,IAAI9G,EAAOC,MAAa,EAEzD8G,EAAOH,EAAO,EAAI,EACxB,OAAO1F,EAAOQ,KAAI,SAAC0D,EAAG9C,GAAJ,OAChB,uBACEwD,cAAc,OACdL,UAAS,UAAoB,KAAfL,EAAExD,SAAkB,WAAawD,EAAExD,UACjD0D,IAAG,UAAKF,EAAE/C,MAAP,WAEH,uBAAGmD,UAAS,oBAAeJ,EAAEb,SAASjG,EAA1B,aAAgC8G,EAAEb,SAAShG,EAA3C,MACV,0BACEkH,UAAU,SACVnH,GAAIyI,EAAOzG,EACXN,MAAc,EAAP+G,EAAWzG,EAClBL,OAAQ8G,EAAOzG,EACfqF,KAAK,UACLD,OAAQN,EAAErD,MACV6D,YAAa,EAAItF,EACjB0G,YAAa,IACbC,OAAO,UAEPlB,aAAYX,EAAE/C,MACd2D,cAAaZ,EAAExD,SACfqE,aAAYb,EAAErD,MACdmE,YAAWd,EAAE3E,KACb0F,aAAY7D,EACZ8D,eAAchB,EAAEzC,OAAOrE,EACvB+H,eAAcjB,EAAEzC,OAAOpE,IAEzB,0BACEoH,KAAK,QACL9E,GAAI+F,EAAOtG,EACX4G,SAAUN,EAAOtG,EACjB6G,WAAW,SACXrB,cAAc,QAED,MAAZV,EAAE/C,MAAgB,OAAS+C,EAAE/C,cAKrC,CAACnB,EAAQlB,EAAOC,EAAQK,IAE3B,OACE,yBAAKP,IAAKA,EAAK0F,UAAU,cACvB,kBAAC,oBAAD,CACE2B,SAAU,EACVC,SAAU,GACVC,cAAc,EACdC,cAAc,WACdC,SAAS,WAET,yBAAK/B,UAAWlG,EAAoBS,MAAOA,EAAOC,OAAQA,GAC1D,0BAAMD,MAAOA,EAAOC,OAAQA,EAAQ0F,KAAK,cAAc8B,QAAS,kBAAM7H,EAAcC,EAAe,MAAQ,MACzG,uBAAG2F,UAAS,oBAAehF,EAAf,mBAAmCF,EAAnC,MACV,uBAAGoH,YAAalD,EAAWmD,aAAcnD,GACtCa,EACAiB,GAEF1G,EACC,uBACE0F,IAAG,UAAK1F,EAAYyC,MAAjB,cACHkD,GAAE,UAAK3F,EAAYyC,MAAjB,cACFyD,cAAc,OACdN,UAAS,oBAAe5F,EAAYoF,QAAU1E,EAArC,aAA+CV,EAAYqF,QAAU3E,EAArE,MAET,0BACE4C,EAAGtD,EAAYa,KACfiF,OAAO,QACPC,KAAK,OACLC,YAAa,EAAItF,EACjBuF,cAAc,MAEhB,0BACE3C,EAAGtD,EAAYa,KACfiF,OAAQ9F,EAAYmC,MACpB4D,KAAK,OACLC,YAAa,EAAItF,EACjBuF,cAAc,OAGhB,QAKRjG,EACE,yBACE6F,UAAU,UACVmC,MAAO,CACLC,KAAMjI,EAAYtB,EAClBwJ,IAAKlI,EAAYrB,EACjBwJ,YAAanI,EAAYmC,QAG3B,yBAAK0D,UAAU,SACU,MAAtB7F,EAAYyC,MAAgB,UAAYzC,EAAYyC,OAEvD,yBAAKoD,UAAU,UACW,KAAvB7F,EAAYmF,OAAgB,YAAcnF,EAAYmF,SAGzD,MArWZtG,EAAgBgD,SAAWhD,EAAgBgD,SAASC,KAAI,SAAAC,GAMtD,OALAA,EAAEU,MAAQV,EAAEqG,WAAWC,QACvBtG,EAAEE,QAAUqG,EAAenE,MAAK,SAAAqB,GAAC,OAAIA,EAAE+C,OAASxG,EAAEU,SAC7CV,EAAEE,SACLrD,EAAO8F,KAAK3C,EAAEU,OAETV,KAERa,QAAO,SAAAb,GAAC,OAAIA,EAAEE,WAEfuC,QAAQgE,KAAR,qCAA2C5J,EAAO6J,KAAK,Q,UChDjDC,EAAe,CAAC,QAAS,YAAa,GAAI,WAAY,UAAW,cAEjE9I,EAAa+I,cAChB9B,OAAO6B,GACP5B,MAAM,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,YAE3DjH,EAAa8I,cAChB9B,OAAO6B,GACP5B,MAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAEnBhH,EAAY6I,cACf9B,OAAO6B,GACP5B,MAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAGnBxF,EAASM,IACbA,IACE0G,EAAexG,KAAI,SAAAW,GAKjB,OAJAA,EAAMA,MAAQA,EAAM8F,KACpB9F,EAAMT,SAAWS,EALJ,aAKsBP,OACnCO,EAAMN,MAAQvC,EAAW6C,EAAMT,UAC/BS,EAAML,MAAQvC,EAAW4C,EAAMT,UACxBS,MAEV,SAAA+C,GAAC,OAAIoD,MAAMC,SAASrD,EAAE/C,QAAU+C,EAAE/C,MAAQoG,SAASrD,EAAE/C,WACvD,SAAA+C,GAAC,OAAKA,EAAEpD,SAQH0G,EAAqB,SAAAC,GAAU,OAAIA,EAAWtG,OAwFrCuG,MAtEf,WAAgB,IAAD,EACajJ,mBAAS,IADtB,mBACNkJ,EADM,KACCC,EADD,OAEyBnJ,mBAASuB,GAFlC,mBAEN6H,EAFM,KAEOC,EAFP,OAG6BrJ,mBAAS2I,GAHtC,mBAGNW,EAHM,KAGSC,EAHT,OAIYpJ,cAJZ,mBAINC,EAJM,KAICC,EAJD,KAICA,MAaRT,EAAqB0J,EAAcvH,KAAI,SAAAN,GAAC,MAAU,KAANA,EAAW,WAAaA,KAAGiH,KAAK,KAElF,OACE,yBAAKtI,IAAKA,EAAK0F,UAAU,OACvB,yBAAKA,UAAU,SACb,yBAAKA,UAAU,SAAf,oCAGA,yBAAKA,UAAU,YAAf,4BAGA,yBAAKA,UAAU,UACZ6C,EAAa9F,QAAO,SAAA2G,GAAC,MAAU,UAANA,KAAeC,UAAU1H,KAAI,SAAAyH,GAAC,OACtD,yBACE7D,IAAK6D,EACL1D,UAAU,OACVgC,QAAS,kBA3BClC,EA2BkB4D,OA1BtCD,GAAiB,SAAAG,GACf,GAAIA,EAAO3G,SAAS6C,GAAK,CACvB,IAAM+D,EAAaD,EAAO5F,QAAQjB,QAAO,SAAAC,GAAK,OAAIA,IAAU8C,KAC5D,OAAO+D,EAAWnF,OAASmF,EAAa,GAExC,OAAOD,EAAO/F,OAAO,CAACiC,OAN5B,IAAsBA,GA4BVqC,MAAO,CAAE2B,QAASN,EAAcvG,SAASyG,GAAK,EAAI,MAElD,yBAAK1D,UAAU,SAASmC,MAAO,CAAE4B,WAAYhK,EAAW2J,MACxD,yBAAK1D,UAAU,SACN,KAAN0D,EAAW,YAAcA,QAKlC,yBAAK1D,UAAU,UACb,kBAAC,IAAD,CACEgE,wBAAyBzJ,EAAQ,IACjC+I,YAAaA,EACbW,4BAA6B,gBAAGb,EAAH,EAAGA,MAAH,OAAeG,EAvEjC,SAAAH,GACrB,IAAMc,EAAad,EAAM/G,OAAO8H,cAEhC,OAAuB,IADHD,EAAWxF,OACJjD,EAASA,EAAOsB,QAAO,SAAAH,GAAK,OAAIA,EAAMA,MAAMuH,cAAclH,SAASiH,MAoEzBE,CAAehB,KAC1EiB,4BAA6B,kBAAMd,EAAe9H,IAClDwH,mBAAoBA,EACpBqB,iBAAkB,SAAApB,GAAU,OAlEf,SAACA,EAAYqB,GACpC,IAAM1K,EAAWqJ,EAAWtG,QAAU2H,EACtC,OACE,yBAAKvE,UAAS,qBAAgBnG,EAAW,WAAa,IAAMsI,MAAO,CAAEG,YAAaY,EAAW5G,QAC3F,yBAAK0D,UAAU,SACZkD,EAAWtG,OAEb/C,EACC,yBAAKmG,UAAU,UACY,KAAxBkD,EAAW/G,SAAkB,YAAc+G,EAAW/G,UAEvD,MAuDkCmI,CAAiBpB,EAAYE,IAC7DoB,WAAY,CACVC,YAAa,SACbrB,QACAsB,SAAU,SAAC1F,EAAD,OAAM2F,EAAN,EAAMA,SAAN,OAAqBtB,EAASsB,SAKhD,kBAAChL,EAAD,CACEE,SAAUuJ,EACVtJ,mBAAoBA,EACpBC,WAAYA,EACZC,WAAYA,EACZC,UAAWA,MClHC2K,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlH,QAAQkH,MAAMA,EAAMC,c","file":"static/js/main.208418b1.chunk.js","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { feature } from 'topojson';\nimport sortBy from 'lodash.sortby';\nimport { scaleLinear } from 'd3-scale';\nimport { geoPath, geoMercator } from 'd3-geo';\nimport useDimensions from 'react-use-dimensions';\nimport { MapInteractionCSS } from 'react-map-interaction';\n\nimport './styles.css';\n\n// Fall20Routeshape // Missing eliminated routes\n// Summer19Routeshape\nimport Winter19Routeshape from './Winter19Routeshape.json';\nimport serviceChanges from './ac-transit-service-cuts.json';\n\n// not using for now\nconst offsetGroups = [\n  // {\n  //   name: 'transbay',\n  //   routes: ['800', '707', '706', '703', '702', '701', 'E', 'Z', 'F', 'FS', 'G', 'CB', 'J', 'L', 'LA', 'NL', 'NX', 'NX1', 'NX2', 'NX4', 'P', 'V', 'W', 'B', 'C', 'H', 'NX3', 'NXC', 'O', 'OX', 'S', 'SB'],\n  //   direction: [-2, 4],\n  //   index: 0,\n  //   initIndex: 0,\n  // },\n  // {\n  //   name: 'sanpablo',\n  //   routes: ['72', '72M', '72R', '802'],\n  //   direction: [-4, 0],\n  //   index: 4,\n  //   initIndex: 4,\n  // },\n  // {\n  //   name: '46',\n  //   routes: ['46', '46L'],\n  //   direction: [0, 4],\n  //   index: 0,\n  //   initIndex: 0,\n  // },\n];\n\nconst manualOffsets = {\n  'B': { x: -0.25, y: -0.25 },\n  'NX1': { x: -0.375, y: 0.125 },\n  'NX3': { x: 0.5, y: 0 },\n  '14': { x: -0.375, y: -0.25 },\n};\n\nconst unused = [];\nconst acTransitRoutes = feature(Winter19Routeshape,  Winter19Routeshape.objects.Winter19Routeshape);\nacTransitRoutes.features = acTransitRoutes.features.map(f => {\n  f.route = f.properties.PUB_RTE;\n  f.changes = serviceChanges.find(r => r.line === f.route);\n  if (!f.changes) {\n    unused.push(f.route);\n  }\n  return f;\n})\n.filter(f => f.changes); // hiding no change info routes for now\n\nconsole.warn(`no change information for: ${unused.join(', ')}`);\n\nfunction getCenter(path, geometry) {\n  const [x, y] = path.centroid(geometry);\n  return { x, y };\n};\n\nfunction getBounds(path, geometry) {\n  const bounds = path.bounds(geometry),\n    dx = bounds[1][0] - bounds[0][0],\n    y1 = bounds[0][1],\n    dy = bounds[1][1] - y1,\n    x = (bounds[0][0] + bounds[1][0]) / 2,\n    y = (y1 + bounds[1][1]) / 2;\n  return { dx, dy, x, y };\n};\n\nfunction scaleProjection(geometry, width, height) {\n  const projection = geoMercator().scale(1000).rotate([-11, 0]).translate([width / 2, height / 2]);\n  const path = geoPath().projection(projection);\n  const target = geometry;\n  const { dx, dy, x, y } = getBounds(path, target);\n  const scale = 0.9 / Math.max(dx / width, dy / height) || 1,\n    translate = [width / 2 - scale * x, height / 2 - scale * y];\n  return { projection, path, scale, translate, x, y, dx, dy, };\n};\n\n// from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\nfunction flatDeep(arr, d = 1) {\n  return d > 0\n    ? arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flatDeep(val, d - 1) : val), [])\n    : arr.slice();\n};\n\nfunction overlapping(box1, box2) {\n  return box1.x2 >= box2.x1 && box1.x1 <= box2.x2 && box1.y1 <= box2.y2 && box1.y2 >= box2.y1;\n}\n\nexport default function TransitMap(props) {\n  const { selected, visibleClassString, colorScale, orderScale, dashScale } = props;\n  const [tooltipData, setTooltipData] = useState();\n  const [ref, { width, height }] = useDimensions();\n\n  const { projection, path, translate, scale } = useMemo(() => (\n    width\n      ? scaleProjection(acTransitRoutes, width, height)\n      : { translate: [0, 0], scale: 0 }\n  ), [width, height]);\n\n  const changeType = 'change-30';\n  \n  const routes = useMemo(() => {\n    offsetGroups.forEach(g => {\n      g.index = g.initIndex;\n    });\n    const labelPositions = [];\n    return width ? (\n      sortBy(\n        sortBy(\n          acTransitRoutes.features.map(f => {\n            f.scaleKey = f.changes ? f.changes[changeType].trim() : 'other';\n            f.color = colorScale(f.scaleKey);\n            f.order = orderScale(f.scaleKey);\n            f.dash = dashScale(f.scaleKey);\n            f.path = path(f);\n            f.center = getCenter(path, f);\n            return f;\n          })\n        , f => -f.route)\n      , f => f.order)\n      .map((f, i) => {\n        const offsets = offsetGroups.filter(group => group.routes.includes(f.route));\n        if (offsets[0]) {\n          const offset = offsets[0];\n          f.offsetType = offset.name;\n          f.offset = {\n            x: offset.direction[0] * offset.index,\n            y: offset.direction[1] * offset.index,\n          };\n          offset.index++;\n        } else {\n          f.offsetType = 'default';\n          f.offset = {\n            x: 0,\n            y: 0,\n          };\n        }\n\n        const size = 0.18; // 0.19; //0.2; // 0.25;\n        const flatCoordinates = flatDeep(f.geometry.coordinates.slice(), Infinity);\n        f.start = projection(flatCoordinates.slice(0, 2));\n        // f.start = projection(flatCoordinates.slice(-2));\n        f.start[0] += f.offset.x / scale;\n        f.start[1] += f.offset.y / scale;\n        let position = f.start;\n        let usedPositon = labelPositions.find(lp => overlapping(lp, {\n          x1: position[0] - size,\n          y1: position[1],\n          x2: position[0] + size,\n          y2: position[1] + size,\n        }));\n\n        if (manualOffsets[f.route]) {\n          position[0] += manualOffsets[f.route].x;\n          position[1] += manualOffsets[f.route].y;\n          // usedPositon = false;\n        }\n        \n        while (usedPositon) {\n          flatCoordinates.splice(0, 2);\n          let pos = f.start;\n          if (flatCoordinates.length >= 2) {\n            pos = projection(flatCoordinates.slice(0, 2));\n            pos[0] += f.offset.x / scale;\n            pos[1] += f.offset.y / scale;\n            usedPositon = labelPositions.find(lp => overlapping(lp, {\n              x1: pos[0] - size,\n              y1: pos[1],\n              x2: pos[0] + size,\n              y2: pos[1] + size,\n            }));\n          } else {\n            console.log(`default: ${f.route}`);\n            usedPositon = false;\n          }\n          position = pos;\n        if (manualOffsets[f.route]) {\n          position[0] += manualOffsets[f.route].x / scale;\n          position[1] += manualOffsets[f.route].y / scale;\n          // usedPositon = false;\n        }\n        }\n\n        labelPositions.push({\n          x1: position[0] - size,\n          y1: position[1],\n          x2: position[0] + size,\n          y2: position[1] + size,\n        });\n\n        f.labelPos = { x: position[0], y: position[1] };\n\n        return f;\n      })\n    ) : [];\n  }, [width, path, colorScale, orderScale, dashScale, projection, scale]);\n\n  useEffect(() => {\n    const dataset = routes.find(r => r.route === selected);\n    if (dataset) {\n      const { route, scaleKey, color, path, order } = dataset;\n      setTooltipData({\n        route, color, path, order,\n        status: scaleKey === '' ? 'no change' : scaleKey,\n        // x: x, // from useDimenions... will get better name\n        // y: y + 16, // from useDimenions... will get better name\n        x: -1000,\n        y: -1000,\n        offsetx: 0,\n        offsety: 0,\n      });\n    } else {\n      setTooltipData(null);\n    }\n  }, [selected, routes]);\n\n  function hoverLine(e) {\n    const { pageX, pageY, target, touches } = e;\n    const { dataset } = target;\n    const { route, status, color, path, order, offsetx, offsety } = dataset;\n    if (route) {\n      if (!tooltipData || tooltipData.route !== route) {\n        const x = pageX !== undefined\n          ? pageX\n          : touches\n            ? touches[0].pageX\n            : 0;\n        const y = pageY !== undefined\n          ? pageY\n          : touches\n            ? touches[0].pageY\n            : 0;\n        setTooltipData({\n          x,\n          y,\n          route,\n          color,\n          path,\n          order,\n          offsetx,\n          offsety,\n          status: status === '' ? 'no change' : status,\n        });\n      }\n    } else {\n      if (tooltipData) {\n        setTooltipData(null);\n      }\n    }\n  }\n\n  const displayRoutes = useMemo(() => (\n    routes.map((r, i) => (\n      <g\n        key={r.route}\n        id={r.route}\n        transform={`translate(${r.offset.x / scale}, ${r.offset.y / scale})`}\n        className={`route ${r.scaleKey === '' ? 'nochange' : r.scaleKey}`}\n      >\n        <path\n          className='visible'\n          d={r.path}\n          stroke={r.color}\n          fill='none'\n          strokeWidth={1.5 / scale}\n          strokeOpacity={0.5}\n          pointerEvents='none'\n        />\n        <path\n          className='highlight'\n          d={r.path}\n          stroke={r.color}\n          fill='none'\n          strokeWidth={3 / scale}\n          strokeOpacity='0'\n          data-route={r.route}\n          data-status={r.scaleKey}\n          data-color={r.color}\n          data-path={r.path}\n          data-order={i}\n          data-offsetx={r.offset.x}\n          data-offsety={r.offset.y}\n        />\n      </g>\n    ))\n  ), [routes, scale]);\n\n  const displayLabels = useMemo(() => {\n    const fontScale = scaleLinear()\n    .domain([480, 1440])\n    // .domain([480, 960])\n    // .range([6, 18])\n    // .range([7, 12])\n    .range([7, 14])\n    .clamp(true);\n    const font = Math.floor(fontScale(Math.min(width, height))) || 9;\n    // console.log(font);\n    const size = font / 3 * 4;\n    return routes.map((r, i) => (\n      <g\n        pointerEvents='none'\n        className={`${r.scaleKey === '' ? 'nochange' : r.scaleKey}`}\n        key={`${r.route}-label`}\n      >\n        <g transform={`translate(${r.labelPos.x}, ${r.labelPos.y})`}>\n          <rect\n            className='target'\n            x={-size / scale}\n            width={size * 2 / scale}\n            height={size / scale}\n            fill='#121212'\n            stroke={r.color}\n            strokeWidth={1 / scale}\n            fillOpacity={0.75}\n            cursor='pointer'\n            // \n            data-route={r.route}\n            data-status={r.scaleKey}\n            data-color={r.color}\n            data-path={r.path}\n            data-order={i}\n            data-offsetx={r.offset.x}\n            data-offsety={r.offset.y}\n          />\n          <text\n            fill='white'\n            dy={font / scale}\n            fontSize={font / scale}\n            textAnchor='middle'\n            pointerEvents='none'\n          >\n            {r.route === '1' ? '1BRT' : r.route}\n          </text>\n        </g>\n      </g>\n    ))\n  }, [routes, width, height, scale]);\n\n  return (\n    <div ref={ref} className=\"TransitMap\">\n      <MapInteractionCSS\n        minScale={1}\n        maxScale={10}\n        showControls={true}\n        controlsClass='controls'\n        btnClass='control'\n      >\n        <svg className={visibleClassString} width={width} height={height}>\n        <rect width={width} height={height} fill='transparent' onClick={() => tooltipData ? setTooltipData(null) : {}} />\n          <g transform={`translate(${translate}) scale(${scale})`}>\n            <g onMouseMove={hoverLine} onTouchStart={hoverLine}>\n              {displayRoutes}\n              {displayLabels}\n            </g>\n            {tooltipData ? (\n              <g\n                key={`${tooltipData.route}-highlight`}\n                id={`${tooltipData.route}-highlight`}\n                pointerEvents='none'\n                transform={`translate(${tooltipData.offsetx / scale}, ${tooltipData.offsety / scale})`}\n              >\n                <path\n                  d={tooltipData.path}\n                  stroke='white'\n                  fill='none'\n                  strokeWidth={6 / scale}\n                  strokeOpacity='1'\n                />\n                <path\n                  d={tooltipData.path}\n                  stroke={tooltipData.color}\n                  fill='none'\n                  strokeWidth={3 / scale}\n                  strokeOpacity='1'\n                />\n              </g>\n            ) : null}\n          </g>\n        </svg>\n      </MapInteractionCSS>\n      {\n        tooltipData ? (\n          <div\n            className='tooltip'\n            style={{\n              left: tooltipData.x,\n              top: tooltipData.y,\n              borderColor: tooltipData.color,\n            }}\n          >\n            <div className='route'>\n              {tooltipData.route === '1' ? 'BRT (1)' : tooltipData.route}\n            </div>\n            <div className='status'>\n              {tooltipData.status === '' ? 'no change' : tooltipData.status}\n            </div>\n          </div>\n        ) : null\n      }\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { scaleOrdinal } from 'd3-scale';\nimport sortBy from 'lodash.sortby';\nimport Autosuggest from 'react-autosuggest';\nimport useDimensions from 'react-use-dimensions';\n\nimport TransitMap from './TransitMap'\nimport serviceChanges from './TransitMap/ac-transit-service-cuts.json';\n\nimport './App.css';\n\nconst typesInOrder = ['other', 'increased', '', 'modified', 'reduced', 'eliminated'];\n\nconst colorScale = scaleOrdinal()\n  .domain(typesInOrder)\n  .range(['#a8aaac', '#008e9b', '#10684e', '#ffc75f', '#ff9671', '#CC0000']);\n\nconst orderScale = scaleOrdinal()\n  .domain(typesInOrder)\n  .range([1, 2, 3, 4, 5, 6]);\n\nconst dashScale = scaleOrdinal()\n  .domain(typesInOrder)\n  .range([0, 0, 0, 1, 2, 3]);\n\nconst changeType = 'change-30';\nconst routes = sortBy(\n  sortBy(\n    serviceChanges.map(route => {\n      route.route = route.line;\n      route.scaleKey = route[changeType].trim();\n      route.color = colorScale(route.scaleKey);\n      route.order = orderScale(route.scaleKey);\n      return route;\n    })\n  ,r => isNaN(parseInt(r.route)) ? r.route : parseInt(r.route))\n,r => -r.order);\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  return inputLength === 0 ? routes : routes.filter(route => route.route.toLowerCase().includes(inputValue));\n};\n\nconst getSuggestionValue = suggestion => suggestion.route;\n\nconst renderSuggestion = (suggestion, selection) => {\n  const selected = suggestion.route === selection;\n  return (\n    <div className={`suggestion ${selected ? 'selected' : ''}`} style={{ borderColor: suggestion.color }}>\n      <div className='label'>\n        {suggestion.route}\n      </div>\n      {selected ? (\n        <div className='status'>\n          {suggestion.scaleKey === '' ? 'no change' : suggestion.scaleKey}\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nfunction App() {\n  const [value, setValue] = useState('');\n  const [suggestions, setSuggestions] = useState(routes);\n  const [visibleGroups, setVisibleGroups] = useState(typesInOrder);\n  const [ref, { width }] = useDimensions();\n\n  function updateGroups(id) {\n    setVisibleGroups(groups => {\n      if (groups.includes(id)) {\n        const nextGroups = groups.slice().filter(group => group !== id);\n        return nextGroups.length ? nextGroups : [];\n      } else {\n        return groups.concat([id]);\n      }\n    });\n  }\n\n  const visibleClassString = visibleGroups.map(g => g === '' ? 'nochange' : g).join(' ');\n\n  return (\n    <div ref={ref} className=\"App\">\n      <div className='panel'>\n        <div className='title'>\n          Proposed AC Transit Service Cuts \n        </div>\n        <div className='subtitle'>\n          Fall 2020 (30% Scenario)\n        </div>        \n        <div className='legend'>\n          {typesInOrder.filter(t => t !== 'other').reverse().map(t => (\n            <div\n              key={t}\n              className='item'\n              onClick={() => updateGroups(t)}\n              style={{ opacity: visibleGroups.includes(t) ? 1 : 0.25 }}\n            >\n              <div className='swatch' style={{ background: colorScale(t) }}/>\n              <div className='label'>\n                {t === '' ? 'no change' : t}\n              </div>\n            </div>\n          ))}\n        </div>\n        <div className='search'>\n          <Autosuggest\n            alwaysRenderSuggestions={width > 768}\n            suggestions={suggestions}\n            onSuggestionsFetchRequested={({ value }) => setSuggestions(getSuggestions(value))}\n            onSuggestionsClearRequested={() => setSuggestions(routes)}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={suggestion => renderSuggestion(suggestion, value)}\n            inputProps={{\n              placeholder: 'Search',\n              value,\n              onChange: (e, { newValue }) => setValue(newValue),\n            }}\n          />\n        </div>\n      </div>\n      <TransitMap\n        selected={value}\n        visibleClassString={visibleClassString}\n        colorScale={colorScale}\n        orderScale={orderScale}\n        dashScale={dashScale}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}