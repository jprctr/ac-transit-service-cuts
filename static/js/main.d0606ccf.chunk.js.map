{"version":3,"sources":["TransitMap/index.js","App.js","serviceWorker.js","index.js"],"names":["unused","acTransitRoutes","feature","Winter19Routeshape","objects","TransitMap","props","colorScale","orderScale","dashScale","useState","tooltipData","setTooltipData","useDimensions","ref","width","height","useMemo","geometry","projection","geoMercator","scale","rotate","translate","path","geoPath","bounds","dx","y1","dy","x","y","getBounds","Math","max","scaleProjection","keys","routes","features","map","f","scaleKey","changes","trim","push","color","order","dash","center","centroid","getCenter","sort","a","b","reverse","hoverLine","e","pageX","pageY","dataset","target","route","status","displayRoutes","r","key","id","className","d","stroke","fill","strokeDasharray","strokeWidth","strokeOpacity","data-route","data-status","data-color","data-path","minScale","maxScale","showControls","transform","onMouseMove","onTouchStart","pointerEvents","style","left","top","properties","PUB_RTE","serviceChanges","find","line","console","warn","join","typesInOrder","scaleOrdinal","domain","range","App","t","background","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d0606ccf.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react';\nimport { feature } from 'topojson';\nimport { geoPath, geoMercator } from 'd3-geo';\nimport useDimensions from 'react-use-dimensions';\nimport { MapInteractionCSS } from 'react-map-interaction';\n\nimport './styles.css';\n\n// Fall20Routeshape // Missing eliminated routes\n// Summer19Routeshape\nimport Winter19Routeshape from './Winter19Routeshape.json';\nimport serviceChanges from './ac-transit-service-cuts.json';\n\nconst unused = [];\nconst acTransitRoutes = feature(Winter19Routeshape,  Winter19Routeshape.objects.Winter19Routeshape);\nacTransitRoutes.features = acTransitRoutes.features.map(f => {\n  f.route = f.properties.PUB_RTE;\n  f.changes = serviceChanges.find(r => r.line === f.route);\n  if (!f.changes) {\n    unused.push(f.route);\n  }\n  return f;\n})\n// .filter(f => f.changes);\nconsole.warn(`no change information for: ${unused.join(', ')}`)\n\nfunction getCenter(path, geometry) {\n  const [x, y] = path.centroid(geometry);\n  return { x, y };\n};\n\nfunction getBounds(path, geometry) {\n  const bounds = path.bounds(geometry),\n    dx = bounds[1][0] - bounds[0][0],\n    y1 = bounds[0][1],\n    dy = bounds[1][1] - y1,\n    x = (bounds[0][0] + bounds[1][0]) / 2,\n    y = (y1 + bounds[1][1]) / 2;\n  return { dx, dy, x, y };\n};\n\nfunction scaleProjection(geometry, width, height) {\n  const projection = geoMercator().scale(1000).rotate([-11, 0]).translate([width / 2, height / 2]);\n  const path = geoPath().projection(projection);\n  const target = geometry;\n  const { dx, dy, x, y } = getBounds(path, target);\n  const scale = 0.9 / Math.max(dx / width, dy / height) || 1,\n    translate = [width / 2 - scale * x, height / 2 - scale * y];\n  return { projection, path, scale, translate, x, y, dx, dy, };\n};\n\nexport default function TransitMap(props) {\n  const { colorScale, orderScale, dashScale } = props;\n  const [tooltipData, setTooltipData] = useState();\n  const [ref, { width, height }] = useDimensions();\n\n  const { path, translate, scale } = useMemo(() => (\n    width\n      ? scaleProjection(acTransitRoutes, width, height)\n      : { translate: [0, 0], scale: 0 }\n  ), [width, height]);\n\n  const changeType = 'change-30';\n  \n  const keys = [];\n  const routes = useMemo(() => (\n    width ? (\n      acTransitRoutes.features.map(f => {\n        f.scaleKey = f.changes ? f.changes[changeType].trim() : 'other';\n        keys.push(f.scaleKey);\n        f.color = colorScale(f.scaleKey);\n        f.order = orderScale(f.scaleKey);\n        f.dash = dashScale(f.scaleKey);\n        f.path = path(f);\n        f.center = getCenter(path, f);\n        return f;\n      })\n      .sort((a, b) => b.order - a.order)\n      .reverse()\n    ) : []\n  ), [width, keys, path, colorScale, orderScale, dashScale]);\n\n  function hoverLine(e) {\n    const { pageX, pageY, target } = e;\n    const { dataset } = target;\n    const { route, status, color, path } = dataset;\n    if (route) {\n      if (!tooltipData || tooltipData.route !== route) {\n        setTooltipData({\n          x: pageX,\n          y: pageY,\n          route,\n          color,\n          path,\n          status: status === '' ? 'no change' : status,\n        });\n      }\n    } else {\n      if (tooltipData) {\n        setTooltipData(null);\n      }\n    }\n  }\n\n  const displayRoutes = useMemo(() => (\n    routes.map(r => (\n      <g\n        key={r.route}\n        id={r.route}\n        className='route'\n      >\n        <path\n          className='visible'\n          d={r.path}\n          stroke={r.color}\n          fill='none'\n          strokeDasharray={`${r.dash / scale} ${r.dash * 2 / scale}`}\n          strokeWidth={0.5 / scale}\n          strokeOpacity={0.5}\n        />\n        <path\n          className='highlight'\n          d={r.path}\n          stroke={r.color}\n          fill='none'\n          strokeWidth={3 / scale}\n          strokeOpacity='0'\n          data-route={r.route}\n          data-status={r.scaleKey}\n          data-color={r.color}\n          data-path={r.path}\n        />\n      </g>\n    ))\n  ), [routes, scale]);\n\n  return (\n    <div ref={ref} className=\"TransitMap\">\n      <MapInteractionCSS\n        minScale={1}\n        maxScale={10}\n        showControls={true}\n        // controlsClass='controls'\n        // btnClass='control'\n      >\n        <svg width={width} height={height}>\n          <g transform={`translate(${translate}) scale(${scale})`}>\n            <g onMouseMove={hoverLine} onTouchStart={hoverLine}>\n              {displayRoutes}\n            </g>\n            {tooltipData ? (\n              <g\n                key={`${tooltipData.route}-highlight`}\n                id={`${tooltipData.route}-highlight`}\n                pointerEvents='none'\n              >\n                <path\n                  d={tooltipData.path}\n                  stroke={tooltipData.color}\n                  fill='none'\n                  strokeWidth={2 / scale}\n                  strokeOpacity='1'\n                />\n              </g>\n            ) : null}\n          </g>\n        </svg>\n      </MapInteractionCSS>\n      {\n        tooltipData ? (\n          <div\n            className='tooltip'\n            style={{ left: tooltipData.x, top: tooltipData.y }}\n          >\n            {`${tooltipData.route}: ${tooltipData.status === '' ? 'no change' : tooltipData.status}`}\n          </div>\n        ) : null\n      }\n    </div>\n  );\n}\n","import React from 'react';\nimport { scaleOrdinal } from 'd3-scale';\n\nimport TransitMap from './TransitMap'\n\nimport './App.css';\n\nconst typesInOrder = ['other', 'increased', '', 'modified', 'reduced', 'eliminated'];\n\nconst colorScale = scaleOrdinal()\n  .domain(typesInOrder)\n  .range(['#a8aaac', '#008e9b', '#10684e', '#ffc75f', '#ff9671', '#CC0000']);\n\nconst orderScale = scaleOrdinal()\n  .domain(typesInOrder)\n  .range([1, 2, 3, 4, 5, 6]);\n\nconst dashScale = scaleOrdinal()\n  .domain(typesInOrder)\n  .range([0, 0, 0, 1, 2, 3]);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className='panel'>\n        <div className='title'>\n          Proposed AC Transit Service Cuts Fall 2020 (30% Scenario)\n        </div>\n        <div className='legend'>\n          {typesInOrder.reverse().map(t => (\n            <div key={t} className='item'>\n              <div className='swatch' style={{ background: colorScale(t) }}/>\n              <div className='label'>\n                {t === '' ? 'no change' : t}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      <TransitMap\n        colorScale={colorScale}\n        orderScale={orderScale}\n        dashScale={dashScale}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}